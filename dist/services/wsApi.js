/**
 * Copyright (c) 2021 BlockchainLAB
 *
 * License: GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007
 * https://www.gnu.org/licenses/agpl-3.0.en.html 
 * 
 * @author Enrico Zanardo <ezanardo@onezerobinary.com>
 *
 */
import*as f from"../../_snowpack/env.js";import{cryptography as c,transactions as i}from"../../_snowpack/pkg/@liskhq/lisk-client.js";import{getWsClient as e}from"../utils/index.js";import l from"../../_snowpack/pkg/lodash.js";const A="100",d="25";export async function purchaseTokensTransaction(t,n=1e3){const s=f.SNOWPACK_PUBLIC_APP_GENESIS_PASSPHRASE;if(!s)throw new Error("No genesis passphrase specified.");const a=await e(),o=c.getAddressFromBase32Address(t),r=typeof n=="number"?n.toString():n,p=await a.transaction.create({moduleID:2,assetID:0,fee:BigInt(i.convertLSKToBeddows("0.01")),asset:{amount:BigInt(i.convertLSKToBeddows(r)),recipientAddress:o,data:"Initial Token purchase"}},s);return a.transaction.send(p)}export async function createIpfsAssetTransaction(t,n){const s=await e(),a=await s.transaction.create({moduleID:1e3,assetID:0,fee:BigInt(i.convertLSKToBeddows(A)),asset:{...t}},n);return s.transaction.send(a)}export async function transferIpfsAssetTransaction(t,n){const s=await e(),a=await s.transaction.create({moduleID:1e3,assetID:1,fee:BigInt(i.convertLSKToBeddows(d)),asset:{...t}},n);return s.transaction.send(a)}export async function fetchAllTransactions(){return await(await e()).invoke("ipfsApi:getTransactions")}export async function fetchTransactionsBySenderPublicKey(t){return await(await e()).invoke("ipfsApi:getTransactionsBySenderPublicKey",{publicKey:t})}export async function fethAllAssets(){return await(await e()).invoke("ipfsApi:getAllAssets")}export async function fetchAssetById(t){const s=await(await e()).invoke("ipfsApi:getAssetById",{assetId:t});if(!l.isEmpty(s))return s}export async function getAllAssetsByKind(t){return await(await e()).invoke("ipfsApi:getAllAssetsByKind",{kind:t})}export async function fetchAssetByOwner(t){return await(await e()).invoke("ipfsApi:getAssetsByOwner",{ownerId:t})}export async function fetchHistoryOfAsset(t){return await(await e()).invoke("ipfsApi:getHistoryOfAsset",{assetId:t})}export async function fetchAccount(t){return await(await e()).account.get(c.getAddressFromBase32Address(t))}
